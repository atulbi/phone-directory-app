{"version":3,"sources":["Components/Auxi.js","Components/Preview.js","Components/Adder.js","App.js","serviceWorker.js","index.js"],"names":["Auxi","props","children","Preview","react_default","a","createElement","className","subs","map","sub","index","Components_Auxi","key","name","number","style","padding","onClick","deleteHandler","bind","Adder","type","placeholder","onChange","textChangedHandler","value","data","NavLink","to","exact","click","App","state","preview","subscriber","ongoing","_this","setState","prevState","subsList","splice","changePreviewHandler","event","text","target","prev","subAddHandler","subName","subPhone","length","push","alert","headText","button","_this2","this","Route","path","render","src_Components_Preview","Redirect","from","src_Components_Adder","Component","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d728742a.chunk.js","sourcesContent":["const Auxi = (props) => props.children;\n\nexport default Auxi;","import React from 'react';\nimport Auxi from './Auxi';\nimport './Preview.css';\n\nconst Preview = (props) => {\n    return (\n        <div className='grid'>\n            <div className='head'>NAME</div>\n            <div className='head'>PHONE</div>\n            <div className='head'></div>\n            {props.subs.map((sub, index) => (\n                <Auxi key={index} >\n                    <div>{sub.name}</div>\n                    <div>{sub.number}</div>\n                    <div style={{ padding: '0px' }}><button onClick={props.deleteHandler.bind(this, index)} className='main-button red'>DELETE</button></div>\n                </Auxi>\n            ))}\n        </div>\n    );\n}\n\nexport default Preview;","import React from 'react';\nimport './Adder.css';\nimport './../App.css';\nimport {NavLink} from 'react-router-dom';\n\nconst Adder = (props) => {\n\n    return (\n        <div>\n            <p>Name: </p>\n            <input type='text' placeholder='Enter Name' onChange={props.textChangedHandler} value={props.data.name} name='name'></input>\n            <p>Phone: </p>\n            <input type='text' placeholder='9876543210' onChange={props.textChangedHandler} value={props.data.number} name='phone'></input>\n            \n            <h5>Subscriber to be added</h5>\n            <p>Name: {props.data.name}</p>\n            <p>Phone: {props.data.number}</p>\n            <NavLink to={'/'} exact><button onClick={props.click} className='main-button green'>ADD</button></NavLink>\n        </div>\n\n    )\n};\n\nexport default Adder;","import React, { Component } from 'react';\nimport './App.css';\nimport Preview from './Components/Preview';\nimport Adder from './Components/Adder';\nimport { Route, NavLink, Redirect } from 'react-router-dom';\n\nclass App extends Component {\n\n  state = {\n    preview: true,\n    subscriber: [\n      {\n        name: \"ATUL\",\n        number: \"8800822609\"\n      },\n    ],\n    ongoing: {\n      name: \"\",\n      number: \"\"\n    }\n  }\n\n  deleteHandler = (index) => {\n    this.setState(prevState => {\n      let subsList = prevState.subscriber;\n      subsList.splice(index, 1);\n      return { subscriber: subsList };\n    });\n  }\n\n  changePreviewHandler = () => {\n    this.setState(prevState => {\n      return { preview: !prevState.preview }\n    })\n  }\n\n  textChangedHandler = (event) => {\n    let text = event.target.value;\n    if (event.target.name === 'name') {\n      this.setState(prevState => {\n        let prev = prevState;\n        prev.ongoing.name = text;\n        return prev;\n      });\n    }\n    if (event.target.name === 'phone') {\n      this.setState(prevState => {\n        let prev = prevState;\n        prev.ongoing.number = text;\n        return prev;\n      });\n    }\n  }\n\n  subAddHandler = () => {\n    let subName = this.state.ongoing.name, subPhone = this.state.ongoing.number;\n    if (subName !== \"\" && subPhone.length === 10) {\n      this.setState(prevState => {\n        let prev = prevState;\n        prev.subscriber.push(this.state.ongoing);\n      });\n      this.setState({ preview: true, ongoing: { name: \"\", number: \"\" } });\n    }\n    else {\n      alert(\"Invalid Input\");\n    }\n  }\n\n  render() {\n    let headText, button;\n    if (this.state.preview) {\n      headText = \"PHONE DIRECTORY\"\n      button = <NavLink to={'/add'} exact ><button className='main-button lightgreen' onClick={this.changePreviewHandler}>ADD</button></NavLink>\n    } else {\n      headText = \"ADD SUBSCRIBER\"\n      button = <NavLink to={'/'} exact ><button className='main-button white' onClick={this.changePreviewHandler}>BACK</button></NavLink>\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {headText}\n        </header>\n        <div className='container'>\n          <div>\n            {button}\n          </div>\n          <Route path=\"/\" exact render={() => this.state.preview ? <Preview subs={this.state.subscriber} deleteHandler={this.deleteHandler}></Preview> : <Redirect from='/' to='/add'></Redirect>} />\n          <Route\n            path=\"/add\"\n            exact\n            render={\n              () => <Adder\n                click={this.subAddHandler}\n                textChangedHandler={this.textChangedHandler}\n                data={this.state.ongoing}>\n              </Adder>}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom' \n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}